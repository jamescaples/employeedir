{"ast":null,"code":"var _jsxFileName = \"/Users/brookekumar/Desktop/codingbootcamp/employeeReact/src/app.js\";\nimport React, { Component } from \"react\";\nimport Employee from \"./components/employee\";\nimport employeeList from \"./data/employeeList.json.js\";\nimport Form from \"./components/form\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      sorted: employeeList,\n      firstName: \"\",\n      lastName: \"\"\n    };\n\n    this.handleInputChange = event => {\n      // Getting the value and name of the input which triggered the change\n      let value = event.target.value;\n      const name = event.target.name; // Updating the input's state\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleFormSubmit = event => {\n      // Preventing the default behavior of the form submit (which is to refresh the page)\n      event.preventDefault(); // Using this.state; Make a if/else statement to do the following\n      // If first or last name is empty alert the user that they are empty\n      // Else if both have values alert the user to say \"Hi firstName and lastName\" \n      //sort a deep copy of the list\n      //WRONG: this.state.property=value\n      //RIGHT: this.setState({propert:value})\n\n      let findFirstName = new Array(...employeeList);\n      console.log(findFirstName);\n      let filtersReturnNewArrays = findFirstName.filter(employee => {\n        console.log(employee.firstName);\n        console.log(this.state.firstName);\n        console.log(employee.firstName.includes(this.state.firstName));\n        return employee.firstName.includes(this.state.firstName) || employee.lastName.includes(this.state.firstName);\n      });\n      console.log(filtersReturnNewArrays); //setState \n\n      this.setState({\n        sorted: filtersReturnNewArrays\n      });\n      this.setState({\n        firstName: \"\",\n        lastName: \"\"\n      });\n    };\n\n    this.sortName = () => {\n      let unsorted = new Array(...employeeList);\n      console.log(unsorted);\n      let sortof = unsorted.sort((a, b) => {\n        console.log(a.firstName, b.firstName);\n        console.log(b.firstName - a.firstName);\n        return a.firstName > b.firstName ? 1 : b.firstName > a.firstName ? -1 : 0;\n      });\n      console.log(sortof);\n      this.setState({\n        sorted: sortof\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Form, {\n      firstName: this.state.firstName,\n      lastName: this.state.lastName,\n      handleInputChange: this.handleInputChange,\n      handleFormSubmit: this.handleFormSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: this.sortName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Alphabetize Name\"), React.createElement(Employee, {\n      employeeList: this.state.sorted,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/brookekumar/Desktop/codingbootcamp/employeeReact/src/app.js"],"names":["React","Component","Employee","employeeList","Form","App","state","sorted","firstName","lastName","handleInputChange","event","value","target","name","setState","handleFormSubmit","preventDefault","findFirstName","Array","console","log","filtersReturnNewArrays","filter","employee","includes","sortName","unsorted","sortof","sort","a","b","render"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Employee from \"./components/employee\";\nimport employeeList from \"./data/employeeList.json.js\";\nimport Form from\"./components/form\";\n\nclass App extends Component {\n\tstate = {\n\t\tsorted: employeeList,\n\t\tfirstName: \"\",\n\t\tlastName: \"\"\n\t}\n\thandleInputChange = event => {\n\t\t// Getting the value and name of the input which triggered the change\n\t\tlet value = event.target.value;\n\t\tconst name = event.target.name;\n\t\n\t\t// Updating the input's state\n\t\tthis.setState({\n\t\t  [name]: value\n\t\t});\n\t  };\n\n\t  handleFormSubmit = event => {\n\t\t// Preventing the default behavior of the form submit (which is to refresh the page)\n\t\tevent.preventDefault();\n\t\n\t\t// Using this.state; Make a if/else statement to do the following\n\t\t// If first or last name is empty alert the user that they are empty\n\t\t// Else if both have values alert the user to say \"Hi firstName and lastName\" \n\t\t\n\t\t//sort a deep copy of the list\n\t\t//WRONG: this.state.property=value\n\t\t//RIGHT: this.setState({propert:value})\n\t\tlet findFirstName= new Array(...employeeList)\n\t\tconsole.log(findFirstName)\n\t\tlet filtersReturnNewArrays= findFirstName.filter(employee=>{\n\t\t\tconsole.log(employee.firstName)\n\t\t\tconsole.log(this.state.firstName)\n\t\t\t\n\t\t\tconsole.log(employee.firstName.includes(this.state.firstName))\n\t\t\treturn employee.firstName.includes(this.state.firstName)\n\t\t\t|| employee.lastName.includes(this.state.firstName)\n\t\t})\n\t\tconsole.log(filtersReturnNewArrays)\n\t\t//setState \n\t\tthis.setState({sorted:filtersReturnNewArrays})\n\t\t\n\t  \n\t\n\t\tthis.setState({\n\t\t  firstName: \"\",\n\t\t  lastName: \"\"\n\t\t});\n\t  };\n\t  sortName = ()=>{\n\t\t  let unsorted = new Array(...employeeList)\n\t\t  console.log(unsorted)\n\t\t  let sortof= unsorted.sort((a,b)=>{\n\t\t\t  console.log(a.firstName, b.firstName)\n\t\t\t  console.log(b.firstName - a.firstName)\n\t\t\t  return (a.firstName > b.firstName) ? 1 : ((b.firstName > a.firstName) ? -1 : 0)\n\t\t\t})\n\t\t  console.log(sortof)\n\t\t  this.setState({sorted:sortof})\n\t  }\n\n\trender(){\n\t\treturn( \n\t\t\t\n\t\t<div>\n\t\t\n\t\t<Form \n\t\tfirstName={this.state.firstName}\n\t\tlastName={this.state.lastName}\n\t\thandleInputChange={this.handleInputChange}\n\t\thandleFormSubmit={this.handleFormSubmit}\n\t\t/> \n\t\n\t\t\t<button onClick={\n\t\t\t\tthis.sortName\n\t\t\t}>Alphabetize Name</button>\n\n\t\t<Employee employeeList={this.state.sorted}/>\n\t\t\n\t\t</div>\n\t)\n\t\t\t}\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}